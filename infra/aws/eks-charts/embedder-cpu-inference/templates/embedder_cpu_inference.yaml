# templates/embedder_cpu_inference.yaml
# Monolithic Helm template for embedder (Deployment + Service + optional PVC + ServiceMonitor + HPA + PDB + NetworkPolicy)
# NOTE: Place into your chart's templates/ folder. Use values.yaml or values.kind.yaml to configure.

{{- $root := . -}}
---
# Namespace (create if requested)
{{- if .Values.namespace.create }}
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace.name | quote }}
  labels:
    name: {{ .Values.namespace.name | quote }}
{{- end }}
---
# ConfigMap for runtime configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-config
  namespace: {{ default .Release.Namespace .Values.namespace.name }}
data:
  MODEL_DIR: "{{ .Values.model.path }}"
  HOST: "{{ .Values.service.host }}"
  PORT: "{{ .Values.service.port }}"
  MAX_LENGTH: "{{ .Values.server.maxLength }}"
  MAX_BATCH: "{{ .Values.server.maxBatch }}"
  BATCH_WAIT_S: "{{ printf "%g" .Values.server.batchWaitS }}"
---
# Optional Secret for image pull (rendered only when enabled)
{{- if .Values.image.pullSecret.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.image.pullSecret.name }}
  namespace: {{ default .Release.Namespace .Values.namespace.name }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ .Values.image.pullSecret.data | quote }}
{{- end }}
---
# Optional PVC for model storage (not used if you mount hostPath)
{{- if .Values.model.usePVC }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-model-pvc
  namespace: {{ default .Release.Namespace .Values.namespace.name }}
spec:
  accessModes:
    - {{ .Values.model.pvc.accessMode }}
  resources:
    requests:
      storage: {{ .Values.model.pvc.size }}
  {{- if .Values.model.pvc.storageClass }}
  storageClassName: {{ .Values.model.pvc.storageClass | quote }}
  {{- end }}
{{- end }}
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}
  namespace: {{ default .Release.Namespace .Values.namespace.name }}
  labels:
    app: {{ include "embedder.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "embedder.name" . }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
  template:
    metadata:
      labels:
        app: {{ include "embedder.name" . }}
      annotations:
        prometheus.io/scrape: "{{ ternary "true" "false" .Values.metrics.prometheusAutoScrape }}"
        prometheus.io/path: "{{ .Values.metrics.metricsPath }}"
        prometheus.io/port: "{{ .Values.service.port }}"
    spec:
      {{- if .Values.image.pullSecret.enabled }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret.name }}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccount.name | default "default" }}
      securityContext:
        {{- if .Values.podSecurity.runAsUser }}
        runAsUser: {{ .Values.podSecurity.runAsUser }}
        {{- end }}
        {{- if .Values.podSecurity.fsGroup }}
        fsGroup: {{ .Values.podSecurity.fsGroup }}
        {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.nodeAffinity }}
      affinity:
{{ toYaml .Values.nodeAffinity | indent 8 }}
      {{- else }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: {{ include "embedder.name" . }}
              topologyKey: kubernetes.io/hostname
      {{- end }}
      containers:
        - name: {{ include "embedder.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # NOTE: we intentionally do NOT override image CMD here.
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
          env:
            - name: HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-config
                  key: HOST
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-config
                  key: PORT
            - name: MODEL_DIR
              valueFrom:
                configMapKeyRef:
                  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-config
                  key: MODEL_DIR
            - name: MAX_LENGTH
              valueFrom:
                configMapKeyRef:
                  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-config
                  key: MAX_LENGTH
            - name: MAX_BATCH
              valueFrom:
                configMapKeyRef:
                  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-config
                  key: MAX_BATCH
            - name: BATCH_WAIT_S
              valueFrom:
                configMapKeyRef:
                  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-config
                  key: BATCH_WAIT_S
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: http
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: http
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          resources:
            requests:
              cpu: "{{ .Values.resources.requests.cpu }}"
              memory: "{{ .Values.resources.requests.memory }}"
            limits:
              cpu: "{{ .Values.resources.limits.cpu }}"
              memory: "{{ .Values.resources.limits.memory }}"
          volumeMounts:
            - name: model
              mountPath: {{ .Values.model.path }}
              {{- if .Values.model.readOnly }}
              readOnly: true
              {{- end }}
      volumes:
        - name: model
          {{- if .Values.model.usePVC }}
          persistentVolumeClaim:
            claimName: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-model-pvc
          {{- else if .Values.model.useHostPath }}
          hostPath:
            path: {{ .Values.model.hostPath.path | quote }}
            type: {{ .Values.model.hostPath.type | default "DirectoryOrCreate" }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- if .Values.model.initContainer.enabled }}
      initContainers:
        - name: fetch-model
          image: {{ .Values.model.initContainer.image | quote }}
          command: {{ toJson .Values.model.initContainer.command }}
          env:
{{ toYaml .Values.model.initContainer.env | indent 12 }}
          volumeMounts:
            - name: model
              mountPath: {{ .Values.model.path }}
      {{- end }}
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}
  namespace: {{ default .Release.Namespace .Values.namespace.name }}
  labels:
    app: {{ include "embedder.name" . }}
spec:
  type: {{ .Values.service.type }}
  selector:
    app: {{ include "embedder.name" . }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
      protocol: TCP
      name: http
---
# Optional ServiceMonitor for Prometheus Operator
{{- if .Values.metrics.serviceMonitor.enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-sm
  namespace: {{ .Values.metrics.serviceMonitor.namespace | default .Release.Namespace }}
  labels:
    release: {{ .Values.metrics.serviceMonitor.release }}
spec:
  selector:
    matchLabels:
      app: {{ include "embedder.name" . }}
  namespaceSelector:
    matchNames:
      - {{ default .Release.Namespace .Values.namespace.name }}
  endpoints:
    - port: http
      path: {{ .Values.metrics.metricsPath }}
      interval: {{ .Values.metrics.interval }}
      scrapeTimeout: {{ .Values.metrics.scrapeTimeout }}
{{- end }}
---
# HorizontalPodAutoscaler (v2) - optional
{{- if .Values.hpa.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-hpa
  namespace: {{ default .Release.Namespace .Values.namespace.name }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}
  minReplicas: {{ .Values.hpa.minReplicas }}
  maxReplicas: {{ .Values.hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.hpa.targetCPUUtilizationPercentage }}
{{- end }}
---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-pdb
  namespace: {{ default .Release.Namespace .Values.namespace.name }}
spec:
  minAvailable: {{ .Values.pdb.minAvailable }}
  selector:
    matchLabels:
      app: {{ include "embedder.name" . }}
---
# NetworkPolicy (optional)
{{- if .Values.networkPolicy.enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ include "embedder.fullname" . | trunc 63 | trimSuffix "-" }}-np
  namespace: {{ default .Release.Namespace .Values.namespace.name }}
spec:
  podSelector:
    matchLabels:
      app: {{ include "embedder.name" . }}
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: {{ .Values.networkPolicy.allowedNamespaceLabel }}
{{- end }}

{{/* Minimal inline helpers: embedder.name and embedder.fullname */}}
{{- define "embedder.name" -}}
embedder
{{- end }}

{{- define "embedder.fullname" -}}
{{- if .Values.fullnameOverride }}
{{- .Values.fullnameOverride }}
{{- else }}
{{- printf "%s-%s" .Release.Name (include "embedder.name" .) | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}

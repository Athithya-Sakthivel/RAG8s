{{- $root := . -}}
{{- $vals := $root.Values.rayservices.onnxEmbedderReranker | default dict -}}
{{- if not (default false $vals.enabled) -}}
{{- else -}}
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: {{ default "rag8s-embedder-reranker-serve" $vals.name | quote }}
  namespace: {{ default $root.Release.Namespace $vals.namespace }}
  labels:
    app.kubernetes.io/name: embedder-reranker
    app.kubernetes.io/instance: {{ $root.Release.Name }}
spec:
  rayClusterConfig:
    rayVersion: {{ $vals.ray.version | quote }}

    headGroupSpec:
      rayStartParams:
        dashboard-host: "0.0.0.0"
      template:
        metadata:
          annotations:
            {{- if $vals.head.annotations }}
{{ toYaml $vals.head.annotations | nindent 12 }}
            {{- end }}
        spec:
          serviceAccountName: {{ default $vals.serviceAccountName "ray-inference-sa" }}
          {{- if $vals.imagePullSecrets }}
          imagePullSecrets:
            {{- range $vals.imagePullSecrets }}
            - name: {{ . }}
            {{- end }}
          {{- end }}
          {{- $headNodeSel := default (dict "karpenter.sh/provisioner-name" "cpu-provisioner" "kubernetes.io/arch" "amd64") $vals.head.nodeSelector }}
          nodeSelector:
{{ toYaml $headNodeSel | indent 12 }}
          {{- if $vals.head.tolerations }}
          tolerations:
{{ toYaml $vals.head.tolerations | indent 12 }}
          {{- end }}
          {{- if $vals.head.affinity }}
          affinity:
{{ toYaml $vals.head.affinity | indent 12 }}
          {{- end }}

          containers:
            - name: ray-head
              image: "{{ $vals.ray.image.repository }}:{{ $vals.ray.image.tag }}"
              imagePullPolicy: {{ $vals.ray.image.pullPolicy | default "IfNotPresent" }}
              env:
                - name: RAY_NODE_ROLE
                  value: "head"
                - name: RAY_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                {{- if $vals.env }}
{{ toYaml $vals.env | indent 16 }}
                {{- end }}
              resources:
                requests:
                  cpu: {{ default "500m" $vals.ray.head.cpu.request | quote }}
                  memory: {{ default "1Gi" $vals.ray.head.memory.request | quote }}
                limits:
                  cpu: {{ default "1" $vals.ray.head.cpu.limit | quote }}
                  memory: {{ default "2Gi" $vals.ray.head.memory.limit | quote }}
              ports:
                - containerPort: 8265
                - containerPort: 8000
                - containerPort: 9000
              volumeMounts:
                - name: model-volume
                  mountPath: {{ $vals.modelMountPath | default "/opt/models" }}
              readinessProbe:
                httpGet:
                  path: /
                  port: 8265
                initialDelaySeconds: 10
                periodSeconds: 10
                failureThreshold: 6
              livenessProbe:
                httpGet:
                  path: /
                  port: 8265
                initialDelaySeconds: 60
                periodSeconds: 30
                failureThreshold: 5

          volumes:
            - name: model-volume
{{- if $vals.useHostPath }}
              hostPath:
                path: {{ $vals.hostPath }}
                type: DirectoryOrCreate
{{- else if $vals.usePVC }}
              persistentVolumeClaim:
                claimName: {{ $vals.modelPVC }}
{{- else }}
              emptyDir: {}
{{- end }}

    workerGroupSpecs:
      - groupName: worker
        minReplicas: {{ $vals.ray.workers.minReplicas }}
        maxReplicas: {{ $vals.ray.workers.maxReplicas }}
        template:
          metadata:
            annotations:
              {{- if $vals.worker.annotations }}
{{ toYaml $vals.worker.annotations | nindent 14 }}
              {{- end }}
          spec:
            {{- $workerSA := default $vals.worker.serviceAccountName $vals.serviceAccountName }}
            {{- if $workerSA }}
            serviceAccountName: {{ $workerSA }}
            {{- end }}
            {{- if $vals.imagePullSecrets }}
            imagePullSecrets:
              {{- range $vals.imagePullSecrets }}
              - name: {{ . }}
              {{- end }}
            {{- end }}
            {{- $workerNodeSel := default (dict "karpenter.sh/provisioner-name" "cpu-provisioner" "kubernetes.io/arch" "amd64") $vals.worker.nodeSelector }}
            nodeSelector:
{{ toYaml $workerNodeSel | indent 14 }}
            {{- if $vals.worker.tolerations }}
            tolerations:
{{ toYaml $vals.worker.tolerations | indent 14 }}
            {{- end }}
            {{- if $vals.worker.affinity }}
            affinity:
{{ toYaml $vals.worker.affinity | indent 14 }}
            {{- end }}

            containers:
              - name: ray-worker
                image: "{{ $vals.ray.image.repository }}:{{ $vals.ray.image.tag }}"
                imagePullPolicy: {{ $vals.ray.image.pullPolicy | default "IfNotPresent" }}
                env:
                  - name: RAY_NODE_ROLE
                    value: "worker"
                  - name: RAY_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  {{- if $vals.env }}
{{ toYaml $vals.env | indent 18 }}
                  {{- end }}
                resources:
                  requests:
                    cpu: {{ default "500m" $vals.ray.workers.cpu.request | quote }}
                    memory: {{ default "1Gi" $vals.ray.workers.memory.request | quote }}
                  limits:
                    cpu: {{ default "1" $vals.ray.workers.cpu.limit | quote }}
                    memory: {{ default "1Gi" $vals.ray.workers.memory.limit | quote }}
                ports:
                  - containerPort: 8000
                  - containerPort: 9000
                volumeMounts:
                  - name: model-volume
                    mountPath: {{ $vals.modelMountPath | default "/opt/models" }}
            readinessProbe:
              httpGet:
                path: /
                port: 8265
              initialDelaySeconds: 15
              periodSeconds: 15
              failureThreshold: 6
            volumes:
              - name: model-volume
                emptyDir: {}
  serveConfigV2: |
    applications:
      - name: embedder-reranker-app
        import_path: {{ $vals.importPath | default "rayserve-embedder-reranker" }}
        runtime_env:
          working_dir: {{ $vals.runtimeWorkingDir | default "/app" }}
        deployments:
          - name: EmbedderServicer
            route_prefix: "/embed"
            ray_actor_options:
              num_cpus: {{ default 1 $vals.embedder.numCPUs }}
            autoscaling_config:
              min_replicas: {{ default 1 $vals.embedder.autoscale.minReplicas }}
              max_replicas: {{ default 4 $vals.embedder.autoscale.maxReplicas }}
              target_num_ongoing_requests_per_replica: {{ default 10 $vals.embedder.autoscale.targetRequestsPerReplica }}
          - name: RerankerServicer
            route_prefix: "/rerank"
            ray_actor_options:
              num_cpus: {{ default 1 $vals.reranker.numCPUs }}
            autoscaling_config:
              min_replicas: {{ default 1 $vals.reranker.autoscale.minReplicas }}
              max_replicas: {{ default 2 $vals.reranker.autoscale.maxReplicas }}
              target_num_ongoing_requests_per_replica: {{ default 5 $vals.reranker.autoscale.targetRequestsPerReplica }}
{{- end }}

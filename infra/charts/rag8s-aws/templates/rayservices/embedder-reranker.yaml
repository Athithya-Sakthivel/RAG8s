{{- /*
RayService for the embedder + reranker (ONNX / CPU) â€” values-driven and defensive.
Renders only when .Values.rayservices.onnxEmbedderReranker.enabled == true.

Value path used: .Values.rayservices.onnxEmbedderReranker
Expected keys (all optional; defaults provided):
  name
  namespace
  ray:
    version
    image:
      repository
      tag
      pullPolicy
    head:
      cpu:
        request
        limit
    workers:
      minReplicas
      maxReplicas
      cpu:
        request
        limit
      gpu: (not used for CPU embedder)
  serviceAccountName
  imagePullSecrets
  modelMountPath
  useHostPath
  hostPath
  usePVC
  modelPVC
  env (map)
  head:
    nodeSelector
    tolerations
    affinity
    annotations
  worker:
    nodeSelector
    tolerations
    affinity
    annotations
  embedder:
    numCPUs
    autoscale:
      minReplicas
      maxReplicas
      targetRequestsPerReplica
  reranker:
    numCPUs
    autoscale:
      minReplicas
      maxReplicas
      targetRequestsPerReplica
*/ -}}
{{- $root := . -}}
{{- $vals := $root.Values.rayservices.onnxEmbedderReranker | default dict -}}
{{- if not (default false $vals.enabled) -}}
{{- else -}}

apiVersion: ray.io/v1
kind: RayService
metadata:
  name: {{ default "rag8s-embedder-reranker-serve" $vals.name | quote }}
  namespace: {{ default (include "rag8s.namespace" $root) $vals.namespace | quote }}
  labels:
    app.kubernetes.io/name: embedder-reranker
    app.kubernetes.io/instance: {{ $root.Release.Name | quote }}
    {{- include "rag8s.labels" $root | nindent 4 }}
spec:
  rayClusterConfig:
    rayVersion: {{ default "2.10.0" $vals.ray.version | quote }}

    headGroupSpec:
      rayStartParams:
        dashboard-host: "0.0.0.0"
      template:
        metadata:
          annotations:
            {{- if $vals.head.annotations }}
{{ toYaml $vals.head.annotations | nindent 12 }}
            {{- end }}
        spec:
          serviceAccountName: {{ default "ray-inference-sa" $vals.serviceAccountName | quote }}
          {{- if $vals.imagePullSecrets }}
          imagePullSecrets:
{{ toYaml $vals.imagePullSecrets | nindent 12 }}
          {{- end }}
          {{- $headNodeSel := default (dict "karpenter.sh/provisioner-name" "cpu-provisioner" "kubernetes.io/arch" "amd64") $vals.head.nodeSelector }}
          nodeSelector:
{{ toYaml $headNodeSel | indent 12 }}
          {{- if $vals.head.tolerations }}
          tolerations:
{{ toYaml $vals.head.tolerations | indent 12 }}
          {{- end }}
          {{- if $vals.head.affinity }}
          affinity:
{{ toYaml $vals.head.affinity | indent 12 }}
          {{- end }}

          containers:
            - name: ray-head
              image: "{{ default "rayproject/ray:2.10.0" (printf "%s:%s" $vals.ray.image.repository $vals.ray.image.tag) }}"
              imagePullPolicy: {{ default "IfNotPresent" $vals.ray.image.pullPolicy }}
              env:
                - name: RAY_NODE_ROLE
                  value: "head"
                - name: RAY_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                {{- if $vals.env }}
{{ toYaml $vals.env | indent 16 }}
                {{- end }}
              resources:
                requests:
                  cpu: {{ default "500m" (default (dict $vals.ray.head.cpu) (dict)).request | quote }}
                  memory: {{ default "1Gi" (default (dict $vals.ray.head.memory) (dict)).request | quote }}
                limits:
                  cpu: {{ default "1" (default (dict $vals.ray.head.cpu) (dict)).limit | quote }}
                  memory: {{ default "2Gi" (default (dict $vals.ray.head.memory) (dict)).limit | quote }}
              ports:
                - containerPort: 8265
                - containerPort: 8000
                - containerPort: 9000
              volumeMounts:
                - name: model-volume
                  mountPath: {{ default "/opt/models" $vals.modelMountPath | quote }}
              readinessProbe:
                httpGet:
                  path: /
                  port: 8265
                initialDelaySeconds: 10
                periodSeconds: 10
              livenessProbe:
                httpGet:
                  path: /
                  port: 8265
                initialDelaySeconds: 60
                periodSeconds: 30

          volumes:
            - name: model-volume
{{- if $vals.useHostPath }}
              hostPath:
                path: {{ $vals.hostPath | quote }}
                type: DirectoryOrCreate
{{- else if $vals.usePVC }}
              persistentVolumeClaim:
                claimName: {{ $vals.modelPVC | quote }}
{{- else }}
              emptyDir: {}
{{- end }}

    workerGroupSpecs:
      - groupName: worker
        minReplicas: {{ default 1 (default (index $vals "worker").minReplicas) }}
        maxReplicas: {{ default 4 (default (index $vals "worker").maxReplicas) }}
        template:
          metadata:
            annotations:
              {{- if $vals.worker.annotations }}
{{ toYaml $vals.worker.annotations | nindent 14 }}
              {{- end }}
          spec:
            {{- $workerSA := default $vals.serviceAccountName "ray-inference-sa" }}
            {{- if $workerSA }}
            serviceAccountName: {{ $workerSA | quote }}
            {{- end }}
            {{- if $vals.imagePullSecrets }}
            imagePullSecrets:
{{ toYaml $vals.imagePullSecrets | nindent 14 }}
            {{- end }}
            {{- $workerNodeSel := default (dict "karpenter.sh/provisioner-name" "cpu-provisioner" "kubernetes.io/arch" "amd64") $vals.worker.nodeSelector }}
            nodeSelector:
{{ toYaml $workerNodeSel | indent 14 }}
            {{- if $vals.worker.tolerations }}
            tolerations:
{{ toYaml $vals.worker.tolerations | indent 14 }}
            {{- end }}
            {{- if $vals.worker.affinity }}
            affinity:
{{ toYaml $vals.worker.affinity | indent 14 }}
            {{- end }}

            containers:
              - name: ray-worker
                image: "{{ default "rayproject/ray:2.10.0" (printf "%s:%s" $vals.ray.image.repository $vals.ray.image.tag) }}"
                imagePullPolicy: {{ default "IfNotPresent" $vals.ray.image.pullPolicy }}
                env:
                  - name: RAY_NODE_ROLE
                    value: "worker"
                  - name: RAY_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  {{- if $vals.env }}
{{ toYaml $vals.env | indent 18 }}
                  {{- end }}
                resources:
                  requests:
                    cpu: {{ default "500m" (default (index $vals.ray.workers "cpu").request) | quote }}
                    memory: {{ default "1Gi" (default (index $vals.ray.workers "memory").request) | quote }}
                  limits:
                    cpu: {{ default "1" (default (index $vals.ray.workers "cpu").limit) | quote }}
                    memory: {{ default "1Gi" (default (index $vals.ray.workers "memory").limit) | quote }}
                ports:
                  - containerPort: 8000
                  - containerPort: 9000
                volumeMounts:
                  - name: model-volume
                    mountPath: {{ default "/opt/models" $vals.modelMountPath | quote }}
            readinessProbe:
              httpGet:
                path: /
                port: 8265
              initialDelaySeconds: 15
              periodSeconds: 15
              failureThreshold: 6
            volumes:
              - name: model-volume
                emptyDir: {}

  serveConfigV2: |
    applications:
      - name: embedder-reranker-app
        import_path: {{ $vals.importPath | default "rayserve-embedder-reranker" | quote }}
        runtime_env:
          working_dir: {{ $vals.runtimeWorkingDir | default "/app" | quote }}
        deployments:
          - name: EmbedderServicer
            route_prefix: "/embed"
            ray_actor_options:
              num_cpus: {{ default 1 (default (index $vals "embedder").numCPUs) }}
            autoscaling_config:
              min_replicas: {{ default 1 (default (index $vals "embedder").autoscale.minReplicas) }}
              max_replicas: {{ default 4 (default (index $vals "embedder").autoscale.maxReplicas) }}
              target_num_ongoing_requests_per_replica: {{ default 10 (default (index $vals "embedder").autoscale.targetRequestsPerReplica) }}
          - name: RerankerServicer
            route_prefix: "/rerank"
            ray_actor_options:
              num_cpus: {{ default 1 (default (index $vals "reranker").numCPUs) }}
            autoscaling_config:
              min_replicas: {{ default 1 (default (index $vals "reranker").autoscale.minReplicas) }}
              max_replicas: {{ default 2 (default (index $vals "reranker").autoscale.maxReplicas) }}
              target_num_ongoing_requests_per_replica: {{ default 5 (default (index $vals "reranker").autoscale.targetRequestsPerReplica) }}
{{- end }}

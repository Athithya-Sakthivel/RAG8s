apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace | quote }}
  labels:
    app.kubernetes.io/name: onnx-embedder
    app.kubernetes.io/managed-by: Helm
---
apiVersion: ray.io/v1alpha1
kind: RayService
metadata:
  name: {{ .Release.Name }}-ray
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: onnx-embedder-reranker
spec:
  rayClusterConfig:
    rayVersion: "{{ .Values.rayVersion }}"
    headGroupSpec:
      headService:
        metadata:
          name: {{ .Values.headServiceName | quote }}
      serviceType: ClusterIP
      rayStartParams:
        dashboard-host: "0.0.0.0"
        ray-client-server-port: "{{ .Values.rayClientPort }}"
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: {{ .Release.Name }}
            ray.io/serve: "true"
            ray-node-type: head
        spec:
          serviceAccountName: {{ .Values.serviceAccount.name | default (printf "%s-sa" .Release.Name) }}
          securityContext:
            runAsUser: {{ .Values.podSecurityContext.runAsUser }}
            fsGroup: {{ .Values.podSecurityContext.fsGroup }}
          initContainers:
            - name: prometheus-multiproc-clean
              image: busybox
              command:
                - sh
                - -c
                - rm -rf /tmp/prometheus_multiproc/* || true && chmod 0777 /tmp/prometheus_multiproc || true
              volumeMounts:
                - name: prometheus-multiproc
                  mountPath: /tmp/prometheus_multiproc
            - name: init-model-check
              image: busybox
              command:
                - sh
                - -c
                - >
                  if [ -f {{ .Values.env.EMBEDDER_ONNX_PATH | quote }} ] && [ -f {{ .Values.env.EMBEDDER_TOKENIZER_PATH | quote }} ] && [ -f {{ .Values.env.RERANKER_ONNX_PATH | quote }} ]; then exit 0; else echo "Required model/tokenizer/config files missing"; exit 1; fi
              volumeMounts:
                - name: models
                  mountPath: /workspace/models
                - name: prometheus-multiproc
                  mountPath: /tmp/prometheus_multiproc
          containers:
            - name: ray-embedder-reranker-head
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["/bin/bash","-lc","--"]
              args:
                - "ulimit -n 65536; $KUBERAY_GEN_RAY_START_CMD; exec python /app/rayserve_entrypoint.py"
              env:
{{- range $k, $v := .Values.env }}
                - name: {{ $k }}
                  value: "{{ $v }}"
{{- end }}
                - name: PROMETHEUS_MULTIPROC_DIR
                  value: "/tmp/prometheus_multiproc"
                - name: RAY_ADDRESS
                  value: "local"
                - name: HTTP_PORT
                  value: "{{ .Values.service.httpPort }}"
                - name: GRPC_PORT
                  value: "{{ .Values.service.grpcPort }}"
                - name: OTEL_EXPORTER_OTLP_ENDPOINT
                  value: "http://{{ .Release.Name }}-otel-collector.{{ .Values.namespace }}.svc.cluster.local:4317"
                - name: OTEL_SERVICE_NAME
                  value: "{{ .Release.Name }}-onnx"
              ports:
                - name: gcs-server
                  containerPort: 6379
                - name: dashboard
                  containerPort: 8265
                - name: http
                  containerPort: {{ .Values.service.httpPort }}
                - name: grpc
                  containerPort: {{ .Values.service.grpcPort }}
                - name: metrics
                  containerPort: {{ .Values.service.metricsPort }}
                - name: ray-client
                  containerPort: {{ .Values.rayClientPort }}
              volumeMounts:
                - name: models
                  mountPath: /workspace/models
                  readOnly: true
                - name: prometheus-multiproc
                  mountPath: /tmp/prometheus_multiproc
              resources:
{{ toYaml .Values.head.resources | indent 14 }}
          volumes:
            - name: models
              persistentVolumeClaim:
                claimName: {{ .Values.pvc.name }}
            - name: prometheus-multiproc
              emptyDir: {}
    workerGroupSpecs:
      - groupName: {{ .Values.worker.groupName }}
        minReplicas: {{ .Values.worker.minReplicas }}
        maxReplicas: {{ .Values.worker.maxReplicas }}
        replicas: {{ .Values.worker.minReplicas }}
        rayStartParams:
          block: "true"
        template:
          metadata:
            labels:
              app.kubernetes.io/instance: {{ .Release.Name }}
              ray.io/serve: "true"
              ray-node-type: worker
          spec:
            serviceAccountName: {{ .Values.serviceAccount.name | default (printf "%s-sa" .Release.Name) }}
            securityContext:
              runAsUser: {{ .Values.podSecurityContext.runAsUser }}
              fsGroup: {{ .Values.podSecurityContext.fsGroup }}
            initContainers:
              - name: prometheus-multiproc-clean
                image: busybox
                command:
                  - sh
                  - -c
                  - rm -rf /tmp/prometheus_multiproc/* || true && chmod 0777 /tmp/prometheus_multiproc || true
                volumeMounts:
                  - name: prometheus-multiproc
                    mountPath: /tmp/prometheus_multiproc
              - name: init-model-check
                image: busybox
                command:
                  - sh
                  - -c
                  - >
                    if [ -f {{ .Values.env.EMBEDDER_ONNX_PATH | quote }} ] && [ -f {{ .Values.env.EMBEDDER_TOKENIZER_PATH | quote }} ] && [ -f {{ .Values.env.RERANKER_ONNX_PATH | quote }} ]; then exit 0; else echo "Required model/tokenizer/config files missing"; exit 1; fi
                volumeMounts:
                  - name: models
                    mountPath: /workspace/models
                  - name: prometheus-multiproc
                    mountPath: /tmp/prometheus_multiproc
            containers:
              - name: ray-worker
                image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                imagePullPolicy: {{ .Values.image.pullPolicy }}
                env:
{{- range $k, $v := .Values.env }}
                  - name: {{ $k }}
                    value: "{{ $v }}"
{{- end }}
                  - name: PROMETHEUS_MULTIPROC_DIR
                    value: "/tmp/prometheus_multiproc"
                  - name: RAY_ADDRESS
                    value: "ray://{{ .Values.headServiceName }}.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.rayClientPort }}"
                  - name: HTTP_PORT
                    value: "{{ .Values.service.httpPort }}"
                  - name: GRPC_PORT
                    value: "{{ .Values.service.grpcPort }}"
                  - name: OTEL_EXPORTER_OTLP_ENDPOINT
                    value: "http://{{ .Release.Name }}-otel-collector.{{ .Values.namespace }}.svc.cluster.local:4317"
                  - name: OTEL_SERVICE_NAME
                    value: "{{ .Release.Name }}-onnx"
                ports:
                  - name: http
                    containerPort: {{ .Values.service.httpPort }}
                  - name: grpc
                    containerPort: {{ .Values.service.grpcPort }}
                  - name: metrics
                    containerPort: {{ .Values.service.metricsPort }}
                volumeMounts:
                  - name: models
                    mountPath: /workspace/models
                    readOnly: true
                  - name: prometheus-multiproc
                    mountPath: /tmp/prometheus_multiproc
                resources:
{{ toYaml .Values.worker.resources | indent 16 }}
            volumes:
              - name: models
                persistentVolumeClaim:
                  claimName: {{ .Values.pvc.name }}
              - name: prometheus-multiproc
                emptyDir: {}
